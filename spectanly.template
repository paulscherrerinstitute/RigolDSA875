record(bo, "$(SYS):PRESET")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p reset() $(PORT)")
}


##############
# Frequency span settings
##############

record(ai, "$(SYS):SPAN")
{
    field(DTYP, "stream")
    field(SCAN, "2 second")
    field(INP, "@dsa875.p gFreq(SPAN) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
}

record(ao, "$(SYS):SPAN_SP")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sFreq(SPAN) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
}

record(bo, "$(SYS):SPAN_FULL")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sSpanPred(FULL) $(PORT)")
}

record(bo, "$(SYS):SPAN_PREV")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sSpanPred(PREV) $(PORT)")
}

record(bo, "$(SYS):SPAN_ZIN")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sSpanPred(ZIN) $(PORT)")
}
record(bo, "$(SYS):SPAN_ZOUT")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sSpanPred(ZOUT) $(PORT)")
}

#############
# Frequency settings
#############
record(ai, "$(SYS):FREQ_CENTER")
{
    field(DTYP, "stream")
    field(SCAN, "2 second")
    field(INP, "@dsa875.p gFreq(CENT) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "7500000000")
}

record(ao, "$(SYS):FREQ_CENTER_SP")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sFreq(CENT) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "7500000000")
}

record(ai, "$(SYS):FREQ_OFFSET")
{
    field(DTYP, "stream")
    field(SCAN, "2 second")
    field(INP, "@dsa875.p gFreq(OFFS) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "100000000000")
}

record(ao, "$(SYS):FREQ_OFFSET_SP")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sFreq(OFFS) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "100000000000")
}

record(ai, "$(SYS):FREQ_START")
{
    field(DTYP, "stream")
    field(SCAN, "2 second")
    field(INP, "@dsa875.p gFreq(STAR) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "7500000000")
}

record(ao, "$(SYS):FREQ_START_SP")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sFreq(STAR) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "7500000000")
}

record(ai, "$(SYS):FREQ_STOP")
{
    field(DTYP, "stream")
    field(SCAN, "2 second")
    field(INP, "@dsa875.p gFreq(STOP) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "7500000000")
}

record(ao, "$(SYS):FREQ_STOP_SP")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sFreq(STOP) $(PORT)")
    field(EGU, "Hz")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "7500000000")
}

##############
# Type of X (FREQ) axis
##############
record(bi, "$(SYS):X_TYPE")
{
    field(DTYP, "stream")
    field(SCAN, "2 second")
    field(INP, "@dsa875.p gXTyp() $(PORT)")
    field(ZNAM, "Linear")
    field(ONAM, "Log10")
}

record(bo, "$(SYS):X_TYPE_SP")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p sXTyp() $(PORT)")
    field(ZNAM, "Linear")
    field(ONAM, "Log10")
}


##############
# Statuses and error handling
##############
## Error checking works in following way:
#  Read event status register (*ESR?) and check if there are errors (2nd bit is 1)
#  When ESR is read it is automatically reset to 0!
#  Errors in the queue can then be read using :SYS:ERR? ("FILO" register)
#
# EPICS implementation:
# Pull ESR status. When second bit not 0, set error status to 1
# When statuses are cleared with *CLS or the last error was read from the error queue
# set error PV to 0

record(mbbiDirect, "$(SYS):STB_STS")
{
    field(DTYP, "stream")
    field(SCAN, "2 second")
    field(INP, "@dsa875.p gSTB() $(PORT)")
    field(PINI, "1")
    field(FLNK, "$(SYS):ERR_IN_Q")
}

# 2nd bit of STB register indicates that errors are in the queue
record(calc, "$(SYS):ERR_IN_Q")
{
    field(INPA, "$(SYS):STB_STS.B2")
    field(CALC, "A>0")
}

record(bo, "$(SYS):CLEAR_ERR")
{
    field(DTYP, "stream")
    field(OUT, "@dsa875.p clrErrQ() $(PORT)")
    field(FLNK, "$(SYS):ERR_MSG")
}

record(waveform, "$(SYS):ERR_MSG")
{   
    field(DTYP, "stream")
    field(INP, "@dsa875.p gErr() $(PORT)")
    field(FTVL, "CHAR")
    field(NELM, "200")
}

record(waveform, "$(SYS):ID")
{   
    field(DTYP, "stream")
    field(INP, "@dsa875.p gDevID() $(PORT)")
    field(PINI, "1")
    field(FTVL, "CHAR")
    field(NELM, "200")
}

record(stringin, "$(SYS):IP")
{   
    field(DTYP, "stream")
    field(INP, "@dsa875.p gDevIP() $(PORT)")
    field(PINI, "1")
}

